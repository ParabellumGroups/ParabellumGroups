#!/bin/bash

# üöÄ Script de D√©ploiement Parabellum Groups
# Usage: ./deploy.sh [environment]
# Exemple: ./deploy.sh production

set -e  # Arr√™t en cas d'erreur

# Variables
ENVIRONMENT=${1:-production}
APP_DIR="/var/www/parabellum-groups"
BACKUP_DIR="/var/backups/parabellum"
DATE=$(date +%Y%m%d_%H%M%S)
LOG_FILE="/var/log/parabellum/deploy_$DATE.log"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a $LOG_FILE
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a $LOG_FILE
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a $LOG_FILE
}

error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a $LOG_FILE
    exit 1
}

# V√©rifications pr√©liminaires
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        error "Fichier package.json non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
    fi
    
    # V√©rifier PM2
    if ! command -v pm2 &> /dev/null; then
        error "PM2 n'est pas install√©"
    fi
    
    # V√©rifier PostgreSQL
    if ! systemctl is-active --quiet postgresql; then
        error "PostgreSQL n'est pas en cours d'ex√©cution"
    fi
    
    success "Pr√©requis valid√©s"
}

# Sauvegarde avant d√©ploiement
backup_system() {
    log "Cr√©ation de la sauvegarde..."
    
    # Cr√©er le dossier de sauvegarde
    sudo mkdir -p $BACKUP_DIR
    
    # Sauvegarde base de donn√©es
    log "Sauvegarde de la base de donn√©es..."
    sudo -u postgres pg_dump parabellum_db | gzip > $BACKUP_DIR/db_$DATE.sql.gz
    
    # Sauvegarde fichiers uploads
    if [ -d "$APP_DIR/Back-end/uploads" ]; then
        log "Sauvegarde des fichiers uploads..."
        tar -czf $BACKUP_DIR/uploads_$DATE.tar.gz -C $APP_DIR/Back-end uploads/
    fi
    
    # Sauvegarde configuration
    if [ -f "$APP_DIR/Back-end/.env" ]; then
        cp $APP_DIR/Back-end/.env $BACKUP_DIR/env_$DATE.backup
    fi
    
    success "Sauvegarde cr√©√©e dans $BACKUP_DIR"
}

# Mise √† jour du code source
update_source() {
    log "Mise √† jour du code source..."
    
    cd $APP_DIR
    
    # Stash des modifications locales
    git stash push -m "Auto-stash before deploy $DATE"
    
    # R√©cup√©ration des derni√®res modifications
    git fetch origin
    git checkout main
    git pull origin main
    
    success "Code source mis √† jour"
}

# D√©ploiement Backend
deploy_backend() {
    log "D√©ploiement du Backend..."
    
    cd $APP_DIR/Back-end
    
    # Installation des d√©pendances
    log "Installation des d√©pendances Backend..."
    npm ci --production
    
    # G√©n√©ration du client Prisma
    log "G√©n√©ration du client Prisma..."
    npx prisma generate
    
    # Application des migrations
    log "Application des migrations de base de donn√©es..."
    npx prisma migrate deploy
    
    # Build de production
    log "Build de production Backend..."
    npm run build
    
    success "Backend d√©ploy√©"
}

# D√©ploiement Frontend
deploy_frontend() {
    log "D√©ploiement du Frontend..."
    
    cd $APP_DIR
    
    # Installation des d√©pendances
    log "Installation des d√©pendances Frontend..."
    npm ci
    
    # Build de production
    log "Build de production Frontend..."
    npm run build
    
    # V√©rification du build
    if [ ! -d "dist" ]; then
        error "Le build Frontend a √©chou√© - dossier dist non trouv√©"
    fi
    
    success "Frontend d√©ploy√©"
}

# Red√©marrage des services
restart_services() {
    log "Red√©marrage des services..."
    
    # Red√©marrage PM2
    if pm2 list | grep -q "parabellum-api"; then
        log "Red√©marrage de l'application PM2..."
        pm2 reload parabellum-api --update-env
    else
        log "D√©marrage initial de l'application PM2..."
        cd $APP_DIR/Back-end
        pm2 start ecosystem.config.js --env $ENVIRONMENT
    fi
    
    # Sauvegarde de la configuration PM2
    pm2 save
    
    # Red√©marrage Nginx
    log "Rechargement de la configuration Nginx..."
    sudo nginx -t
    sudo systemctl reload nginx
    
    success "Services red√©marr√©s"
}

# Tests post-d√©ploiement
run_health_checks() {
    log "Ex√©cution des tests de sant√©..."
    
    # Attendre que l'API soit pr√™te
    sleep 10
    
    # Test API Health
    log "Test de l'endpoint de sant√©..."
    if curl -f -s http://localhost:3001/api/health > /dev/null; then
        success "API op√©rationnelle"
    else
        error "L'API ne r√©pond pas correctement"
    fi
    
    # Test Frontend
    log "Test du Frontend..."
    if curl -f -s http://localhost > /dev/null; then
        success "Frontend accessible"
    else
        warning "Frontend pourrait avoir des probl√®mes"
    fi
    
    # Test base de donn√©es
    log "Test de la base de donn√©es..."
    cd $APP_DIR/Back-end
    if npx prisma db execute --stdin <<< "SELECT 1;" > /dev/null 2>&1; then
        success "Base de donn√©es accessible"
    else
        error "Probl√®me de connexion √† la base de donn√©es"
    fi
    
    success "Tests de sant√© termin√©s"
}

# Nettoyage post-d√©ploiement
cleanup() {
    log "Nettoyage post-d√©ploiement..."
    
    # Nettoyage des anciennes sauvegardes (garder 7 jours)
    find $BACKUP_DIR -name "*.sql.gz" -mtime +7 -delete 2>/dev/null || true
    find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete 2>/dev/null || true
    
    # Nettoyage des logs PM2
    pm2 flush
    
    # Nettoyage du cache npm
    npm cache clean --force
    
    success "Nettoyage termin√©"
}

# Fonction de rollback
rollback() {
    warning "Rollback en cours..."
    
    # Arr√™ter l'application
    pm2 stop parabellum-api
    
    # Restaurer la derni√®re sauvegarde
    LATEST_BACKUP=$(ls -t $BACKUP_DIR/db_*.sql.gz | head -1)
    if [ -n "$LATEST_BACKUP" ]; then
        log "Restauration de la base de donn√©es : $LATEST_BACKUP"
        zcat $LATEST_BACKUP | sudo -u postgres psql parabellum_db
    fi
    
    # Revenir au commit pr√©c√©dent
    cd $APP_DIR
    git reset --hard HEAD~1
    
    # Red√©ployer la version pr√©c√©dente
    deploy_backend
    deploy_frontend
    restart_services
    
    warning "Rollback termin√©"
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement Parabellum Groups - Environnement: $ENVIRONMENT"
    
    # Cr√©er le dossier de logs
    sudo mkdir -p /var/log/parabellum
    sudo chown $USER:$USER /var/log/parabellum
    
    # Trap pour g√©rer les erreurs
    trap 'error "D√©ploiement √©chou√©. Consultez les logs : $LOG_FILE"' ERR
    
    # Ex√©cution des √©tapes
    check_prerequisites
    backup_system
    update_source
    deploy_backend
    deploy_frontend
    restart_services
    run_health_checks
    cleanup
    
    success "üéâ D√©ploiement termin√© avec succ√®s !"
    log "üìä Statistiques du d√©ploiement :"
    log "   - Dur√©e : $(($(date +%s) - START_TIME)) secondes"
    log "   - Version : $(git rev-parse --short HEAD)"
    log "   - Environnement : $ENVIRONMENT"
    log "   - Logs : $LOG_FILE"
}

# Gestion des arguments
case "$1" in
    "rollback")
        rollback
        ;;
    "health")
        run_health_checks
        ;;
    "backup")
        backup_system
        ;;
    *)
        START_TIME=$(date +%s)
        main
        ;;
esac