
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  serviceId: 'serviceId',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  preferences: 'preferences',
  permissions: 'permissions',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  customerNumber: 'customerNumber',
  type: 'type',
  name: 'name',
  legalName: 'legalName',
  siret: 'siret',
  vatNumber: 'vatNumber',
  email: 'email',
  phone: 'phone',
  mobile: 'mobile',
  website: 'website',
  paymentTerms: 'paymentTerms',
  paymentMethod: 'paymentMethod',
  creditLimit: 'creditLimit',
  discountRate: 'discountRate',
  category: 'category',
  tags: 'tags',
  notes: 'notes',
  isActive: 'isActive',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  type: 'type',
  name: 'name',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  city: 'city',
  country: 'country',
  isDefault: 'isDefault',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  unit: 'unit',
  priceHt: 'priceHt',
  vatRate: 'vatRate',
  costPrice: 'costPrice',
  stockQuantity: 'stockQuantity',
  stockAlertThreshold: 'stockAlertThreshold',
  isActive: 'isActive',
  weight: 'weight',
  dimensions: 'dimensions',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductPriceScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  customerCategory: 'customerCategory',
  minQuantity: 'minQuantity',
  priceHt: 'priceHt',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  quoteNumber: 'quoteNumber',
  customerId: 'customerId',
  customerAddressId: 'customerAddressId',
  status: 'status',
  quoteDate: 'quoteDate',
  validUntil: 'validUntil',
  subtotalHt: 'subtotalHt',
  discountAmount: 'discountAmount',
  totalVat: 'totalVat',
  totalTtc: 'totalTtc',
  terms: 'terms',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sentAt: 'sentAt',
  submittedForServiceApprovalAt: 'submittedForServiceApprovalAt',
  serviceManagerApprovedBy: 'serviceManagerApprovedBy',
  serviceManagerApprovalDate: 'serviceManagerApprovalDate',
  serviceManagerComments: 'serviceManagerComments',
  dgApprovedBy: 'dgApprovedBy',
  dgApprovalDate: 'dgApprovalDate',
  dgComments: 'dgComments',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.QuoteItemScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  productId: 'productId',
  description: 'description',
  quantity: 'quantity',
  unitPriceHt: 'unitPriceHt',
  discountRate: 'discountRate',
  vatRate: 'vatRate',
  totalHt: 'totalHt',
  sortOrder: 'sortOrder'
};

exports.Prisma.QuoteApprovalScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  approverId: 'approverId',
  approvalLevel: 'approvalLevel',
  status: 'status',
  approvalDate: 'approvalDate',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  customerId: 'customerId',
  customerAddressId: 'customerAddressId',
  quoteId: 'quoteId',
  type: 'type',
  status: 'status',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  subtotalHt: 'subtotalHt',
  discountAmount: 'discountAmount',
  totalVat: 'totalVat',
  totalTtc: 'totalTtc',
  paidAmount: 'paidAmount',
  balanceDue: 'balanceDue',
  paymentTerms: 'paymentTerms',
  lateFeeRate: 'lateFeeRate',
  terms: 'terms',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sentAt: 'sentAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  productId: 'productId',
  description: 'description',
  quantity: 'quantity',
  unitPriceHt: 'unitPriceHt',
  discountRate: 'discountRate',
  vatRate: 'vatRate',
  totalHt: 'totalHt',
  sortOrder: 'sortOrder'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentNumber: 'paymentNumber',
  customerId: 'customerId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentAllocationScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  invoiceId: 'invoiceId',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.RecurringInvoiceScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  templateName: 'templateName',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  nextInvoiceDate: 'nextInvoiceDate',
  isActive: 'isActive',
  subtotalHt: 'subtotalHt',
  totalVat: 'totalVat',
  totalTtc: 'totalTtc',
  terms: 'terms',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringInvoiceItemScalarFieldEnum = {
  id: 'id',
  recurringInvoiceId: 'recurringInvoiceId',
  productId: 'productId',
  description: 'description',
  quantity: 'quantity',
  unitPriceHt: 'unitPriceHt',
  vatRate: 'vatRate',
  totalHt: 'totalHt',
  sortOrder: 'sortOrder'
};

exports.Prisma.ReminderScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  type: 'type',
  sentDate: 'sentDate',
  dueDate: 'dueDate',
  amountDue: 'amountDue',
  lateFees: 'lateFees',
  status: 'status',
  emailSubject: 'emailSubject',
  emailBody: 'emailBody',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  referenceId: 'referenceId',
  filename: 'filename',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  generatedAt: 'generatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  expenseNumber: 'expenseNumber',
  supplierId: 'supplierId',
  category: 'category',
  description: 'description',
  amountHt: 'amountHt',
  vatAmount: 'vatAmount',
  totalTtc: 'totalTtc',
  expenseDate: 'expenseDate',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  status: 'status',
  receiptUrl: 'receiptUrl',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  addressLine1: 'addressLine1',
  city: 'city',
  postalCode: 'postalCode',
  country: 'country',
  vatNumber: 'vatNumber',
  bankName: 'bankName',
  bankIban: 'bankIban',
  bankBic: 'bankBic',
  paymentTerms: 'paymentTerms',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountingEntryScalarFieldEnum = {
  id: 'id',
  entryDate: 'entryDate',
  accountNumber: 'accountNumber',
  debit: 'debit',
  credit: 'credit',
  description: 'description',
  sourceDocumentType: 'sourceDocumentType',
  sourceDocumentId: 'sourceDocumentId',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.CashFlowScalarFieldEnum = {
  id: 'id',
  transactionDate: 'transactionDate',
  type: 'type',
  amount: 'amount',
  description: 'description',
  category: 'category',
  sourceDocumentType: 'sourceDocumentType',
  sourceDocumentId: 'sourceDocumentId',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeNumber: 'employeeNumber',
  registrationNumber: 'registrationNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  placeOfBirth: 'placeOfBirth',
  nationality: 'nationality',
  socialSecurityNumber: 'socialSecurityNumber',
  cnpsNumber: 'cnpsNumber',
  cnamNumber: 'cnamNumber',
  bankAccount: 'bankAccount',
  emergencyContact: 'emergencyContact',
  serviceId: 'serviceId',
  position: 'position',
  department: 'department',
  category: 'category',
  level: 'level',
  manager: 'manager',
  hireDate: 'hireDate',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  contractType: 'contractType',
  startDate: 'startDate',
  endDate: 'endDate',
  baseSalary: 'baseSalary',
  workingHours: 'workingHours',
  benefits: 'benefits',
  terms: 'terms',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalaryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  paymentDate: 'paymentDate',
  workingDays: 'workingDays',
  baseSalary: 'baseSalary',
  overtime: 'overtime',
  bonuses: 'bonuses',
  allowances: 'allowances',
  paidLeave: 'paidLeave',
  grossSalary: 'grossSalary',
  socialContributions: 'socialContributions',
  cnpsEmployee: 'cnpsEmployee',
  cnamEmployee: 'cnamEmployee',
  fdfpEmployee: 'fdfpEmployee',
  taxes: 'taxes',
  nonTaxableAmount: 'nonTaxableAmount',
  otherDeductions: 'otherDeductions',
  loanDeductions: 'loanDeductions',
  totalDeductions: 'totalDeductions',
  netSalary: 'netSalary',
  status: 'status',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.LoanPaymentScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  salaryId: 'salaryId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  principal: 'principal',
  interest: 'interest',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  days: 'days',
  reason: 'reason',
  notes: 'notes',
  status: 'status',
  approvedById: 'approvedById',
  approvedAt: 'approvedAt',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProspectScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactName: 'contactName',
  position: 'position',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  industry: 'industry',
  companySize: 'companySize',
  estimatedValue: 'estimatedValue',
  priority: 'priority',
  stage: 'stage',
  source: 'source',
  notes: 'notes',
  hasBudget: 'hasBudget',
  isDecisionMaker: 'isDecisionMaker',
  hasNeed: 'hasNeed',
  timeline: 'timeline',
  lastContact: 'lastContact',
  nextAction: 'nextAction',
  nextActionDate: 'nextActionDate',
  assignedTo: 'assignedTo',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProspectActivityScalarFieldEnum = {
  id: 'id',
  prospectId: 'prospectId',
  type: 'type',
  subject: 'subject',
  description: 'description',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  outcome: 'outcome',
  nextAction: 'nextAction',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  loanNumber: 'loanNumber',
  employeeId: 'employeeId',
  amount: 'amount',
  interestRate: 'interestRate',
  monthlyPayment: 'monthlyPayment',
  remainingAmount: 'remainingAmount',
  startDate: 'startDate',
  endDate: 'endDate',
  purpose: 'purpose',
  status: 'status',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecialiteScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TechnicienScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  contact: 'contact',
  specialiteId: 'specialiteId',
  utilisateurId: 'utilisateurId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MissionScalarFieldEnum = {
  numIntervention: 'numIntervention',
  natureIntervention: 'natureIntervention',
  objectifDuContrat: 'objectifDuContrat',
  description: 'description',
  priorite: 'priorite',
  statut: 'statut',
  dateSortieFicheIntervention: 'dateSortieFicheIntervention',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterventionScalarFieldEnum = {
  id: 'id',
  dateHeureDebut: 'dateHeureDebut',
  dateHeureFin: 'dateHeureFin',
  duree: 'duree',
  missionId: 'missionId',
  statut: 'statut',
  commentaire: 'commentaire',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TechnicienInterventionScalarFieldEnum = {
  id: 'id',
  technicienId: 'technicienId',
  interventionId: 'interventionId',
  role: 'role',
  commentaire: 'commentaire',
  createdAt: 'createdAt'
};

exports.Prisma.RapportMissionScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  contenu: 'contenu',
  interventionId: 'interventionId',
  technicienId: 'technicienId',
  missionId: 'missionId',
  createdById: 'createdById',
  statut: 'statut',
  dateValidation: 'dateValidation',
  commentaire: 'commentaire',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RapportImageScalarFieldEnum = {
  id: 'id',
  rapportId: 'rapportId',
  url: 'url',
  description: 'description',
  ordre: 'ordre',
  createdAt: 'createdAt'
};

exports.Prisma.MaterielScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  designation: 'designation',
  description: 'description',
  quantiteTotale: 'quantiteTotale',
  quantiteDisponible: 'quantiteDisponible',
  seuilAlerte: 'seuilAlerte',
  emplacement: 'emplacement',
  categorie: 'categorie',
  prixUnitaire: 'prixUnitaire',
  fournisseur: 'fournisseur',
  dateAchat: 'dateAchat',
  garantie: 'garantie',
  statut: 'statut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortieMaterielScalarFieldEnum = {
  id: 'id',
  materielId: 'materielId',
  interventionId: 'interventionId',
  technicienId: 'technicienId',
  quantite: 'quantite',
  dateSortie: 'dateSortie',
  motif: 'motif',
  retourne: 'retourne',
  dateRetour: 'dateRetour',
  quantiteRetour: 'quantiteRetour',
  commentaire: 'commentaire',
  createdAt: 'createdAt'
};

exports.Prisma.EntreeMaterielScalarFieldEnum = {
  id: 'id',
  materielId: 'materielId',
  quantite: 'quantite',
  dateEntree: 'dateEntree',
  source: 'source',
  prixTotal: 'prixTotal',
  fournisseur: 'fournisseur',
  facture: 'facture',
  commentaire: 'commentaire',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  data: 'data',
  readAt: 'readAt',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  GENERAL_DIRECTOR: 'GENERAL_DIRECTOR',
  SERVICE_MANAGER: 'SERVICE_MANAGER',
  EMPLOYEE: 'EMPLOYEE',
  ACCOUNTANT: 'ACCOUNTANT'
};

exports.CustomerType = exports.$Enums.CustomerType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  TRANSFER: 'TRANSFER',
  CHECK: 'CHECK',
  CARD: 'CARD',
  CASH: 'CASH',
  OTHER: 'OTHER'
};

exports.AddressType = exports.$Enums.AddressType = {
  BILLING: 'BILLING',
  SHIPPING: 'SHIPPING',
  OTHER: 'OTHER'
};

exports.ProductType = exports.$Enums.ProductType = {
  PRODUCT: 'PRODUCT',
  SERVICE: 'SERVICE',
  SUBSCRIPTION: 'SUBSCRIPTION'
};

exports.QuoteStatus = exports.$Enums.QuoteStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED_FOR_SERVICE_APPROVAL: 'SUBMITTED_FOR_SERVICE_APPROVAL',
  APPROVED_BY_SERVICE_MANAGER: 'APPROVED_BY_SERVICE_MANAGER',
  REJECTED_BY_SERVICE_MANAGER: 'REJECTED_BY_SERVICE_MANAGER',
  SUBMITTED_FOR_DG_APPROVAL: 'SUBMITTED_FOR_DG_APPROVAL',
  APPROVED_BY_DG: 'APPROVED_BY_DG',
  REJECTED_BY_DG: 'REJECTED_BY_DG',
  ACCEPTED_BY_CLIENT: 'ACCEPTED_BY_CLIENT',
  REJECTED_BY_CLIENT: 'REJECTED_BY_CLIENT',
  EXPIRED: 'EXPIRED'
};

exports.ApprovalLevel = exports.$Enums.ApprovalLevel = {
  SERVICE_MANAGER: 'SERVICE_MANAGER',
  GENERAL_DIRECTOR: 'GENERAL_DIRECTOR'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.InvoiceType = exports.$Enums.InvoiceType = {
  INVOICE: 'INVOICE',
  CREDIT_NOTE: 'CREDIT_NOTE',
  PROFORMA: 'PROFORMA'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PAID: 'PAID',
  PARTIAL: 'PARTIAL',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.RecurringFrequency = exports.$Enums.RecurringFrequency = {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY'
};

exports.ReminderType = exports.$Enums.ReminderType = {
  FRIENDLY: 'FRIENDLY',
  FORMAL: 'FORMAL',
  FINAL: 'FINAL',
  LEGAL: 'LEGAL'
};

exports.ReminderStatus = exports.$Enums.ReminderStatus = {
  SENT: 'SENT',
  READ: 'READ',
  PAID: 'PAID',
  IGNORED: 'IGNORED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  QUOTE: 'QUOTE',
  INVOICE: 'INVOICE',
  CREDIT_NOTE: 'CREDIT_NOTE',
  REMinder: 'REMinder',
  REPORT: 'REPORT'
};

exports.ExpenseStatus = exports.$Enums.ExpenseStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  REIMBURSED: 'REIMBURSED'
};

exports.SourceDocumentType = exports.$Enums.SourceDocumentType = {
  INVOICE: 'INVOICE',
  QUOTE: 'QUOTE',
  PAYMENT: 'PAYMENT',
  EXPENSE: 'EXPENSE',
  SALARY: 'SALARY',
  OTHER: 'OTHER'
};

exports.CashFlowType = exports.$Enums.CashFlowType = {
  INFLOW: 'INFLOW',
  OUTFLOW: 'OUTFLOW'
};

exports.ContractType = exports.$Enums.ContractType = {
  CDI: 'CDI',
  CDD: 'CDD',
  STAGE: 'STAGE',
  FREELANCE: 'FREELANCE'
};

exports.SalaryStatus = exports.$Enums.SalaryStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  ANNUAL: 'ANNUAL',
  SICK: 'SICK',
  PERSONAL: 'PERSONAL',
  MATERNITY: 'MATERNITY',
  PATERNITY: 'PATERNITY',
  OTHER: 'OTHER'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.LoanStatus = exports.$Enums.LoanStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Service: 'Service',
  User: 'User',
  Customer: 'Customer',
  CustomerAddress: 'CustomerAddress',
  Product: 'Product',
  ProductPrice: 'ProductPrice',
  Quote: 'Quote',
  QuoteItem: 'QuoteItem',
  QuoteApproval: 'QuoteApproval',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  PaymentAllocation: 'PaymentAllocation',
  RecurringInvoice: 'RecurringInvoice',
  RecurringInvoiceItem: 'RecurringInvoiceItem',
  Reminder: 'Reminder',
  Document: 'Document',
  Expense: 'Expense',
  Supplier: 'Supplier',
  AccountingEntry: 'AccountingEntry',
  CashFlow: 'CashFlow',
  AuditLog: 'AuditLog',
  Employee: 'Employee',
  Contract: 'Contract',
  Salary: 'Salary',
  LoanPayment: 'LoanPayment',
  LeaveRequest: 'LeaveRequest',
  Prospect: 'Prospect',
  ProspectActivity: 'ProspectActivity',
  Loan: 'Loan',
  Specialite: 'Specialite',
  Technicien: 'Technicien',
  Mission: 'Mission',
  Intervention: 'Intervention',
  TechnicienIntervention: 'TechnicienIntervention',
  RapportMission: 'RapportMission',
  RapportImage: 'RapportImage',
  Materiel: 'Materiel',
  SortieMateriel: 'SortieMateriel',
  EntreeMateriel: 'EntreeMateriel',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
