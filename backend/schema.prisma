generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users     User[]
  customers Customer[]
  employees Employee[]

  @@map("services")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  role         UserRole  @default(EMPLOYEE)
  serviceId    Int?      @map("service_id")
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  preferences  String?
  permissions  String?   // JSON des permissions personnalisées
  avatarUrl    String?   @map("avatar_url")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations CORRIGÉES
  service            Service?          @relation(fields: [serviceId], references: [id])
  createdCustomers   Customer[]        @relation("CustomerCreatedBy")
  createdQuotes      Quote[]           @relation("QuoteCreatedBy")
  createdInvoices    Invoice[]         @relation("InvoiceCreatedBy")
  createdPayments    Payment[]         @relation("PaymentCreatedBy")
  serviceApprovals   Quote[]           @relation("ServiceManagerApproval")
  dgApprovals        Quote[]           @relation("DGApproval")
  auditLogs          AuditLog[]
  quoteApprovals     QuoteApproval[]
  createdExpenses    Expense[]         @relation("ExpenseCreatedBy")
  accountingEntries  AccountingEntry[]
  cashFlowEntries    CashFlow[]
  createdReminders   Reminder[]        @relation("ReminderCreatedBy")
  createdRecurringInvoices RecurringInvoice[] @relation("RecurringInvoiceCreatedBy")
  employee           Employee?
  leaveApprovals     LeaveRequest[]    @relation("LeaveApprovedBy")
  assignedProspects  Prospect[]        @relation("ProspectAssignedTo")
  createdProspects   Prospect[]        @relation("ProspectCreatedBy")
  createdProspectActivities ProspectActivity[] @relation("ProspectActivityCreatedBy")
  technicien         Technicien?
  notifications      Notification[]
  sentMessages       Message[]         @relation("MessageSender")
  receivedMessages   Message[]         @relation("MessageRecipient")

  @@map("users")
}

model Customer {
  id               Int            @id @default(autoincrement())
  customerNumber   String         @unique @map("customer_number")
  type             CustomerType   @default(COMPANY)
  name             String
  legalName        String?        @map("legal_name")
  siret            String?
  vatNumber        String?        @map("vat_number")
  email            String?
  phone            String?
  mobile           String?
  website          String?
  paymentTerms     Int            @default(30) @map("payment_terms")
  paymentMethod    PaymentMethod  @default(TRANSFER) @map("payment_method")
  creditLimit      Float          @default(0) @map("credit_limit")
  discountRate     Float          @default(0) @map("discount_rate")
  category         String?
  tags             String?
  notes            String?
  isActive         Boolean        @default(true) @map("is_active")
  serviceId        Int?           @map("service_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  createdBy        Int            @map("created_by")

  // Relations CORRIGÉES
  service           Service?       @relation(fields: [serviceId], references: [id])
  creator           User           @relation("CustomerCreatedBy", fields: [createdBy], references: [id])
  addresses         CustomerAddress[]
  quotes            Quote[]
  invoices          Invoice[]
  payments          Payment[]
  recurringInvoices RecurringInvoice[]
  missions          Mission[]

  @@map("customers")
}

model CustomerAddress {
  id           Int         @id @default(autoincrement())
  customerId   Int         @map("customer_id")
  type         AddressType
  name         String?
  addressLine1 String      @map("address_line1")
  addressLine2 String?     @map("address_line2")
  postalCode   String      @map("postal_code")
  city         String
  country      String      @default("France")
  isDefault    Boolean     @default(false) @map("is_default")
  createdAt    DateTime    @default(now()) @map("created_at")

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  quotes   Quote[]
  invoices Invoice[]

  @@map("customer_addresses")
}

model Product {
  id                  Int          @id @default(autoincrement())
  sku                 String       @unique
  name                String
  description         String?
  type                ProductType  @default(PRODUCT)
  category            String?
  unit                String       @default("pièce")
  priceHt             Float        @map("price_ht")
  vatRate             Float        @default(20.00) @map("vat_rate")
  costPrice           Float?       @map("cost_price")
  stockQuantity       Int          @default(0) @map("stock_quantity")
  stockAlertThreshold Int          @default(0) @map("stock_alert_threshold")
  isActive            Boolean      @default(true) @map("is_active")
  weight              Float?
  dimensions          String?
  imageUrl            String?      @map("image_url")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")

  prices                ProductPrice[]
  quoteItems            QuoteItem[]
  invoiceItems          InvoiceItem[]
  recurringInvoiceItems RecurringInvoiceItem[]

  @@map("products")
}

model ProductPrice {
  id               Int       @id @default(autoincrement())
  productId        Int       @map("product_id")
  customerCategory String?   @map("customer_category")
  minQuantity      Int       @default(1) @map("min_quantity")
  priceHt          Float     @map("price_ht")
  validFrom        DateTime? @map("valid_from")
  validUntil       DateTime? @map("valid_until")
  createdAt        DateTime  @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_prices")
}

model Quote {
  id                            Int         @id @default(autoincrement())
  quoteNumber                   String      @unique @map("quote_number")
  customerId                    Int         @map("customer_id")
  customerAddressId             Int?        @map("customer_address_id")
  status                        QuoteStatus @default(DRAFT)
  quoteDate                     DateTime    @map("quote_date")
  validUntil                    DateTime    @map("valid_until")
  subtotalHt                    Float       @default(0) @map("subtotal_ht")
  discountAmount                Float       @default(0) @map("discount_amount")
  totalVat                      Float       @default(0) @map("total_vat")
  totalTtc                      Float       @default(0) @map("total_ttc")
  terms                         String?
  notes                         String?
  createdBy                     Int         @map("created_by")
  createdAt                     DateTime    @default(now()) @map("created_at")
  updatedAt                     DateTime    @updatedAt @map("updated_at")
  sentAt                        DateTime?   @map("sent_at")
  submittedForServiceApprovalAt DateTime?   @map("submitted_for_service_approval_at")
  serviceManagerApprovedBy      Int?        @map("service_manager_approved_by")
  serviceManagerApprovalDate    DateTime?   @map("service_manager_approval_date")
  serviceManagerComments        String?     @map("service_manager_comments")
  dgApprovedBy                  Int?        @map("dg_approved_by")
  dgApprovalDate                DateTime?   @map("dg_approval_date")
  dgComments                    String?     @map("dg_comments")
  acceptedAt                    DateTime?   @map("accepted_at")

  customer        Customer         @relation(fields: [customerId], references: [id])
  customerAddress CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  creator         User             @relation("QuoteCreatedBy", fields: [createdBy], references: [id])
  serviceManager  User?            @relation("ServiceManagerApproval", fields: [serviceManagerApprovedBy], references: [id])
  dgApprover      User?            @relation("DGApproval", fields: [dgApprovedBy], references: [id])
  items           QuoteItem[]
  invoices        Invoice[]
  approvals       QuoteApproval[]
  missions        Mission[]

  @@map("quotes")
}

model QuoteItem {
  id           Int     @id @default(autoincrement())
  quoteId      Int     @map("quote_id")
  productId    Int?    @map("product_id")
  description  String
  quantity     Float
  unitPriceHt  Float   @map("unit_price_ht")
  discountRate Float   @default(0) @map("discount_rate")
  vatRate      Float   @map("vat_rate")
  totalHt      Float   @map("total_ht")
  sortOrder    Int     @default(0) @map("sort_order")

  quote   Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("quote_items")
}

model QuoteApproval {
  id            Int            @id @default(autoincrement())
  quoteId       Int            @map("quote_id")
  approverId    Int            @map("approver_id")
  approvalLevel ApprovalLevel  @map("approval_level")
  status        ApprovalStatus @default(PENDING)
  approvalDate  DateTime?      @map("approval_date")
  comments      String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  quote    Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  approver User  @relation(fields: [approverId], references: [id])

  @@unique([quoteId, approvalLevel])
  @@map("quote_approvals")
}

model Invoice {
  id                Int           @id @default(autoincrement())
  invoiceNumber     String        @unique @map("invoice_number")
  customerId        Int           @map("customer_id")
  customerAddressId Int?          @map("customer_address_id")
  quoteId           Int?          @map("quote_id")
  type              InvoiceType   @default(INVOICE)
  status            InvoiceStatus @default(DRAFT)
  invoiceDate       DateTime      @map("invoice_date")
  dueDate           DateTime      @map("due_date")
  subtotalHt        Float         @default(0) @map("subtotal_ht")
  discountAmount    Float         @default(0) @map("discount_amount")
  totalVat          Float         @default(0) @map("total_vat")
  totalTtc          Float         @default(0) @map("total_ttc")
  paidAmount        Float         @default(0) @map("paid_amount")
  balanceDue        Float         @default(0) @map("balance_due")
  paymentTerms      Int           @default(30) @map("payment_terms")
  lateFeeRate       Float         @default(0) @map("late_fee_rate")
  terms             String?
  notes             String?
  createdBy         Int           @map("created_by")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  sentAt            DateTime?     @map("sent_at")

  customer         Customer         @relation(fields: [customerId], references: [id])
  customerAddress  CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  quote            Quote?           @relation(fields: [quoteId], references: [id])
  creator          User             @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  items            InvoiceItem[]
  paymentAllocations PaymentAllocation[]
  reminders        Reminder[]

  @@map("invoices")
}

model InvoiceItem {
  id           Int     @id @default(autoincrement())
  invoiceId    Int     @map("invoice_id")
  productId    Int?    @map("product_id")
  description  String
  quantity     Float
  unitPriceHt  Float   @map("unit_price_ht")
  discountRate Float   @default(0) @map("discount_rate")
  vatRate      Float   @map("vat_rate")
  totalHt      Float   @map("total_ht")
  sortOrder    Int     @default(0) @map("sort_order")

  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentNumber String        @unique @map("payment_number")
  customerId    Int           @map("customer_id")
  amount        Float
  paymentDate   DateTime      @map("payment_date")
  paymentMethod PaymentMethod @map("payment_method")
  reference     String?
  notes         String?
  createdBy     Int           @map("created_by")
  createdAt     DateTime      @default(now()) @map("created_at")

  customer    Customer            @relation(fields: [customerId], references: [id])
  creator     User                @relation("PaymentCreatedBy", fields: [createdBy], references: [id])
  allocations PaymentAllocation[]

  @@map("payments")
}

model PaymentAllocation {
  id        Int      @id @default(autoincrement())
  paymentId Int      @map("payment_id")
  invoiceId Int      @map("invoice_id")
  amount    Float
  createdAt DateTime @default(now()) @map("created_at")

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payment_allocations")
}

model RecurringInvoice {
  id              Int                  @id @default(autoincrement())
  customerId      Int                  @map("customer_id")
  templateName    String               @map("template_name")
  frequency       RecurringFrequency
  startDate       DateTime             @map("start_date")
  endDate         DateTime?            @map("end_date")
  nextInvoiceDate DateTime             @map("next_invoice_date")
  isActive        Boolean              @default(true) @map("is_active")
  subtotalHt      Float                @default(0) @map("subtotal_ht")
  totalVat        Float                @default(0) @map("total_vat")
  totalTtc        Float                @default(0) @map("total_ttc")
  terms           String?
  notes           String?
  createdBy       Int                  @map("created_by")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  customer Customer                @relation(fields: [customerId], references: [id])
  creator  User                    @relation("RecurringInvoiceCreatedBy", fields: [createdBy], references: [id])
  items    RecurringInvoiceItem[]

  @@map("recurring_invoices")
}

model RecurringInvoiceItem {
  id                 Int     @id @default(autoincrement())
  recurringInvoiceId Int     @map("recurring_invoice_id")
  productId          Int?    @map("product_id")
  description        String
  quantity           Float
  unitPriceHt        Float   @map("unit_price_ht")
  vatRate            Float   @map("vat_rate")
  totalHt            Float   @map("total_ht")
  sortOrder          Int     @default(0) @map("sort_order")

  recurringInvoice RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id], onDelete: Cascade)
  product          Product?         @relation(fields: [productId], references: [id])

  @@map("recurring_invoice_items")
}

model Reminder {
  id           Int            @id @default(autoincrement())
  invoiceId    Int            @map("invoice_id")
  type         ReminderType
  sentDate     DateTime       @map("sent_date")
  dueDate      DateTime?      @map("due_date")
  amountDue    Float          @map("amount_due")
  lateFees     Float          @default(0) @map("late_fees")
  status       ReminderStatus @default(SENT)
  emailSubject String?        @map("email_subject")
  emailBody    String?        @map("email_body")
  createdBy    Int            @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  creator User    @relation("ReminderCreatedBy", fields: [createdBy], references: [id])

  @@map("reminders")
}

model Document {
  id          Int          @id @default(autoincrement())
  type        DocumentType
  referenceId Int          @map("reference_id")
  filename    String
  filePath    String       @map("file_path")
  fileSize    Int?         @map("file_size")
  mimeType    String?      @map("mime_type")
  generatedAt DateTime     @default(now()) @map("generated_at")

  @@map("documents")
}

model Expense {
  id            Int           @id @default(autoincrement())
  expenseNumber String        @unique @map("expense_number")
  supplierId    Int?          @map("supplier_id")
  category      String
  description   String?
  amountHt      Float         @map("amount_ht")
  vatAmount     Float         @default(0) @map("vat_amount")
  totalTtc      Float         @map("total_ttc")
  expenseDate   DateTime      @map("expense_date")
  paymentDate   DateTime?     @map("payment_date")
  paymentMethod PaymentMethod @default(CARD) @map("payment_method")
  status        ExpenseStatus @default(PENDING)
  receiptUrl    String?       @map("receipt_url")
  notes         String?
  createdBy     Int           @map("created_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  supplier Supplier? @relation(fields: [supplierId], references: [id])
  creator  User      @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])

  @@map("expenses")
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String
  contactPerson String?  @map("contact_person")
  email         String?
  phone         String?
  addressLine1  String?  @map("address_line1")
  city          String?
  postalCode    String?  @map("postal_code")
  country       String?
  vatNumber     String?  @map("vat_number")
  bankName      String?  @map("bank_name")
  bankIban      String?  @map("bank_iban")
  bankBic       String?  @map("bank_bic")
  paymentTerms  Int      @default(30) @map("payment_terms")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  expenses Expense[]

  @@map("suppliers")
}

model AccountingEntry {
  id                 Int                @id @default(autoincrement())
  entryDate          DateTime           @map("entry_date")
  accountNumber      String             @map("account_number")
  debit              Float              @default(0)
  credit             Float              @default(0)
  description        String?
  sourceDocumentType SourceDocumentType @map("source_document_type")
  sourceDocumentId   Int                @map("source_document_id")
  createdBy          Int                @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")

  creator User @relation(fields: [createdBy], references: [id])

  @@map("accounting_entries")
}

model CashFlow {
  id                 Int                @id @default(autoincrement())
  transactionDate    DateTime           @map("transaction_date")
  type               CashFlowType
  amount             Float
  description        String?
  category           String?
  sourceDocumentType SourceDocumentType @map("source_document_type")
  sourceDocumentId   Int                @map("source_document_id")
  createdBy          Int                @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")

  creator User @relation(fields: [createdBy], references: [id])

  @@map("cash_flow")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String
  details   String?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Employee {
  id                   Int       @id @default(autoincrement())
  employeeNumber       String    @unique @map("employee_number")
  registrationNumber   String?   @unique @map("registration_number")
  firstName            String    @map("first_name")
  lastName             String    @map("last_name")
  email                String?
  phone                String?
  address              String?
  dateOfBirth          DateTime  @map("date_of_birth")
  placeOfBirth         String?   @map("place_of_birth")
  nationality          String?
  socialSecurityNumber String?   @map("social_security_number")
  cnpsNumber           String?   @map("cnps_number")
  cnamNumber           String?   @map("cnam_number")
  bankAccount          String?   @map("bank_account")
  emergencyContact     String?   @map("emergency_contact")
  serviceId            Int?      @map("service_id")
  position             String
  department           String?
  category             String?   @map("professional_category")
  level                String?   @map("professional_level")
  manager              String?
  hireDate             DateTime  @map("hire_date")
  isActive             Boolean   @default(true) @map("is_active")
  userId               Int?      @unique @map("user_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  service       Service?       @relation(fields: [serviceId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  contracts     Contract[]
  salaries      Salary[]
  leaveRequests LeaveRequest[]
  loans         Loan[]

  @@map("employees")
}

model Contract {
  id            Int          @id @default(autoincrement())
  employeeId    Int          @map("employee_id")
  contractType  ContractType @map("contract_type")
  startDate     DateTime     @map("start_date")
  endDate       DateTime?    @map("end_date")
  baseSalary    Float        @map("base_salary")
  workingHours  Float        @map("working_hours")
  benefits      String?
  terms         String?
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Salary {
  id                   Int      @id @default(autoincrement())
  employeeId           Int      @map("employee_id")
  paymentDate          DateTime @map("payment_date")
  workingDays          Int      @default(22) @map("working_days")
  baseSalary           Float    @map("base_salary")
  overtime             Float    @default(0)
  bonuses              Float    @default(0)
  allowances           Float    @default(0)
  paidLeave            Float    @default(0) @map("paid_leave")
  grossSalary          Float    @map("gross_salary")
  socialContributions  Float    @default(0) @map("social_contributions")
  cnpsEmployee         Float    @default(0) @map("cnps_employee")
  cnamEmployee         Float    @default(0) @map("cnam_employee")
  fdfpEmployee         Float    @default(0) @map("fdfp_employee")
  taxes                Float    @default(0)
  nonTaxableAmount     Float    @default(0) @map("non_taxable_amount")
  otherDeductions      Float    @default(0) @map("other_deductions")
  loanDeductions       Float    @default(0) @map("loan_deductions")
  totalDeductions      Float    @map("total_deductions")
  netSalary            Float    @map("net_salary")
  status               SalaryStatus @default(PENDING)
  paymentMethod        PaymentMethod? @map("payment_method")
  reference            String?
  notes                String?
  createdAt            DateTime @default(now()) @map("created_at")

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  // Ajout pour compléter la relation avec LoanPayment
  loanPayments LoanPayment[]

  @@map("salaries")
}

model LeaveRequest {
  id           Int         @id @default(autoincrement())
  employeeId   Int         @map("employee_id")
  leaveType    LeaveType   @map("leave_type")
  startDate    DateTime    @map("start_date")
  endDate      DateTime    @map("end_date")
  days         Int
  reason       String
  notes        String?
  status       LeaveStatus @default(PENDING)
  approvedById Int?        @map("approved_by_id")
  approvedAt   DateTime?   @map("approved_at")
  comments     String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approvedBy User?    @relation("LeaveApprovedBy", fields: [approvedById], references: [id])

  @@map("leave_requests")
}

model Prospect {
  id             Int      @id @default(autoincrement())
  companyName    String   @map("company_name")
  contactName    String   @map("contact_name")
  position       String?
  email          String?
  phone          String?
  address        String?
  website        String?
  industry       String?
  companySize    String?  @map("company_size")
  estimatedValue Float?   @map("estimated_value")
  priority       String   @default("B") // A, B, C
  stage          String   @default("preparation") // preparation, research, contact, discovery, proposal, won, lost
  source         String?
  notes          String?
  hasBudget      Boolean  @default(false) @map("has_budget")
  isDecisionMaker Boolean @default(false) @map("is_decision_maker")
  hasNeed        Boolean  @default(false) @map("has_need")
  timeline       String?
  lastContact    DateTime @default(now()) @map("last_contact")
  nextAction     String?  @map("next_action")
  nextActionDate DateTime? @map("next_action_date")
  assignedTo     Int?     @map("assigned_to")
  createdBy      Int      @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  assignedUser   User?    @relation("ProspectAssignedTo", fields: [assignedTo], references: [id])
  creator        User     @relation("ProspectCreatedBy", fields: [createdBy], references: [id])
  activities     ProspectActivity[]

  @@map("prospects")
}

model ProspectActivity {
  id          Int      @id @default(autoincrement())
  prospectId  Int      @map("prospect_id")
  type        String   // call, email, meeting, note
  subject     String?
  description String?
  scheduledAt DateTime? @map("scheduled_at")
  completedAt DateTime? @map("completed_at")
  outcome     String?
  nextAction  String?  @map("next_action")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  creator  User     @relation("ProspectActivityCreatedBy", fields: [createdBy], references: [id])

  @@map("prospect_activities")
}

// Enums
enum UserRole {
  ADMIN
  GENERAL_DIRECTOR
  SERVICE_MANAGER
  EMPLOYEE
  ACCOUNTANT
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
}

enum AddressType {
  BILLING
  SHIPPING
  OTHER
}

enum ProductType {
  PRODUCT
  SERVICE
  SUBSCRIPTION
}

enum PaymentMethod {
  TRANSFER
  CHECK
  CARD
  CASH
  OTHER
}

enum QuoteStatus {
  DRAFT
  SUBMITTED_FOR_SERVICE_APPROVAL
  APPROVED_BY_SERVICE_MANAGER
  REJECTED_BY_SERVICE_MANAGER
  SUBMITTED_FOR_DG_APPROVAL
  APPROVED_BY_DG
  REJECTED_BY_DG
  ACCEPTED_BY_CLIENT
  REJECTED_BY_CLIENT
  EXPIRED
}

enum ApprovalLevel {
  SERVICE_MANAGER
  GENERAL_DIRECTOR
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvoiceType {
  INVOICE
  CREDIT_NOTE
  PROFORMA
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum RecurringFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ReminderType {
  FRIENDLY
  FORMAL
  FINAL
  LEGAL
}

enum ReminderStatus {
  SENT
  READ
  PAID
  IGNORED
}

enum DocumentType {
  QUOTE
  INVOICE
  CREDIT_NOTE
  REMinder
  REPORT
}

enum ExpenseStatus {
  PENDING
  PAID
  REIMBURSED
}

enum SourceDocumentType {
  INVOICE
  QUOTE
  PAYMENT
  EXPENSE
  SALARY
  OTHER
}

enum CashFlowType {
  INFLOW
  OUTFLOW
}

enum ContractType {
  CDI
  CDD
  STAGE
  FREELANCE
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SalaryStatus {
  PENDING
  PAID
}

model Loan {
  id              Int        @id @default(autoincrement())
  loanNumber      String     @unique @map("loan_number")
  employeeId      Int        @map("employee_id")
  amount          Float
  interestRate    Float      @default(0) @map("interest_rate")
  monthlyPayment  Float      @map("monthly_payment")
  remainingAmount Float      @map("remaining_amount")
  startDate       DateTime   @map("start_date")
  endDate         DateTime   @map("end_date")
  purpose         String?
  status          LoanStatus @default(ACTIVE)
  notes           String?
  createdBy       Int        @map("created_by")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payments  LoanPayment[]

  @@map("loans")
}

model LoanPayment {
  id          Int      @id @default(autoincrement())
  loanId      Int      @map("loan_id")
  salaryId    Int?     @map("salary_id")
  amount      Float
  paymentDate DateTime @map("payment_date")
  principal   Float
  interest    Float
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")

  loan   Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  salary Salary? @relation(fields: [salaryId], references: [id])

  @@map("loan_payments")
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Specialite {
  id          Int     @id @default(autoincrement())
  libelle     String  @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  techniciens Technicien[]

  @@map("specialites")
}

model Technicien {
  id            Int    @id @default(autoincrement())
  nom           String
  prenom        String
  contact       String
  specialiteId  Int    @map("specialite_id")
  utilisateurId Int?   @unique @map("utilisateur_id")
  isActive      Boolean @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  specialite       Specialite               @relation(fields: [specialiteId], references: [id])
  utilisateur      User?                    @relation(fields: [utilisateurId], references: [id])
  interventions    TechnicienIntervention[]
  rapports         RapportMission[]
  sortiesMateriels SortieMateriel[]

  @@map("techniciens")
}

model Mission {
  numIntervention             String   @id @unique @map("num_intervention")
  natureIntervention          String   @map("nature_intervention")
  objectifDuContrat           String   @map("objectif_du_contrat")
  description                 String?
  priorite                    String?  @default("normale")
  statut                      String?  @default("planifiee")
  dateSortieFicheIntervention DateTime @map("date_sortie_fiche_intervention")
  clientId                    Int      @map("client_id")
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")

  client        Customer         @relation(fields: [clientId], references: [id])
  interventions Intervention[]
  rapports      RapportMission[]
  devis         Quote[]

  @@map("missions")
}

model Intervention {
  id             Int       @id @default(autoincrement())
  dateHeureDebut DateTime  @map("date_heure_debut")
  dateHeureFin   DateTime? @map("date_heure_fin")
  duree          Int?
  missionId      String    @map("mission_id")
  statut         String    @default("planifiee")
  commentaire    String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  mission          Mission                  @relation(fields: [missionId], references: [numIntervention])
  techniciens      TechnicienIntervention[]
  rapports         RapportMission[]
  sortiesMateriels SortieMateriel[]

  @@map("interventions")
}

model TechnicienIntervention {
  id             Int     @id @default(autoincrement())
  technicienId   Int     @map("technicien_id")
  interventionId Int     @map("intervention_id")
  role           String  @default("assistant")
  commentaire    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  technicien   Technicien   @relation(fields: [technicienId], references: [id])
  intervention Intervention @relation(fields: [interventionId], references: [id])

  @@unique([technicienId, interventionId])
  @@map("technicien_interventions")
}

model RapportMission {
  id             Int       @id @default(autoincrement())
  titre          String
  contenu        String
  interventionId Int?      @map("intervention_id")
  technicienId   Int       @map("technicien_id")
  missionId      String    @map("mission_id")
  createdById    Int?      @map("created_by_id")
  statut         String    @default("soumis")
  dateValidation DateTime? @map("date_validation")
  commentaire    String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  intervention Intervention?  @relation(fields: [interventionId], references: [id])
  technicien   Technicien     @relation(fields: [technicienId], references: [id])
  mission      Mission        @relation(fields: [missionId], references: [numIntervention])
  images       RapportImage[]

  @@map("rapports_mission")
}

model RapportImage {
  id          Int     @id @default(autoincrement())
  rapportId   Int     @map("rapport_id")
  url         String
  description String?
  ordre       Int
  createdAt   DateTime @default(now()) @map("created_at")

  rapport RapportMission @relation(fields: [rapportId], references: [id], onDelete: Cascade)

  @@map("rapport_images")
}

model Materiel {
  id                 Int       @id @default(autoincrement())
  reference          String    @unique
  designation        String
  description        String?
  quantiteTotale     Int       @default(0) @map("quantite_totale")
  quantiteDisponible Int       @default(0) @map("quantite_disponible")
  seuilAlerte        Int       @default(5) @map("seuil_alerte")
  emplacement        String?
  categorie          String    @default("Outillage")
  prixUnitaire       Float?    @default(0) @map("prix_unitaire")
  fournisseur        String?
  dateAchat          DateTime? @map("date_achat")
  garantie           String?
  statut             String    @default("actif")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  sorties SortieMateriel[]
  entrees EntreeMateriel[]

  @@map("materiels")
}

model SortieMateriel {
  id             Int       @id @default(autoincrement())
  materielId     Int       @map("materiel_id")
  interventionId Int       @map("intervention_id")
  technicienId   Int       @map("technicien_id")
  quantite       Int
  dateSortie     DateTime  @default(now()) @map("date_sortie")
  motif          String?
  retourne       Boolean   @default(false)
  dateRetour     DateTime? @map("date_retour")
  quantiteRetour Int?      @default(0) @map("quantite_retour")
  commentaire    String?
  createdAt      DateTime  @default(now()) @map("created_at")

  materiel     Materiel     @relation(fields: [materielId], references: [id])
  intervention Intervention @relation(fields: [interventionId], references: [id])
  technicien   Technicien   @relation(fields: [technicienId], references: [id])

  @@map("sorties_materiel")
}

model EntreeMateriel {
  id          Int      @id @default(autoincrement())
  materielId  Int      @map("materiel_id")
  quantite    Int
  dateEntree  DateTime @default(now()) @map("date_entree")
  source      String   @default("achat")
  prixTotal   Float?   @default(0) @map("prix_total")
  fournisseur String?
  facture     String?
  commentaire String?
  createdAt   DateTime @default(now()) @map("created_at")

  materiel Materiel @relation(fields: [materielId], references: [id])

  @@map("entrees_materiel")
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      String
  message   String
  data      String?
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")
  userId    Int       @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Message {
  id            Int       @id @default(autoincrement())
  senderId      Int       @map("sender_id")
  recipientId   Int       @map("recipient_id")
  subject       String
  content       String
  priority      String    @default("normal") // low, normal, high, urgent
  type          String    @default("internal") // internal, external, system
  status        String    @default("unread") // unread, read, replied, archived
  readAt        DateTime? @map("read_at")
  archivedAt    DateTime? @map("archived_at")
  parentMessageId Int?    @map("parent_message_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  sender         User              @relation("MessageSender", fields: [senderId], references: [id])
  recipient      User              @relation("MessageRecipient", fields: [recipientId], references: [id])
  parentMessage  Message?          @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies        Message[]         @relation("MessageReplies")
  attachments    MessageAttachment[]

  @@map("messages")
}

model MessageAttachment {
  id        Int      @id @default(autoincrement())
  messageId Int      @map("message_id")
  filename  String
  url       String
  size      Int?
  mimeType  String?  @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}